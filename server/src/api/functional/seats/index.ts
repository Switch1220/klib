/**
 * @packageDocumentation
 * @module api.functional.seats
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { ISeat } from "../../structures/seats/ISeat";

export * as reservations from "./reservations";

/**
 * List up all seats
 *
 * @author Switch
 *
 * @controller SeatsController.index
 * @path GET /seats
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function index(connection: IConnection): Promise<index.Output> {
  return !!connection.simulate
    ? index.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...index.METADATA,
        path: index.path(),
      });
}
export namespace index {
  export type Output = Array<ISeat>;

  export const METADATA = {
    method: "GET",
    path: "/seats",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/seats";
  export const random = (g?: Partial<typia.IRandomGenerator>): Array<ISeat> =>
    typia.random<Array<ISeat>>(g);
  export const simulate = (connection: IConnection): Output => {
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * Create seat reservation
 *
 * @author Switch
 *
 * @controller SeatsController.create
 * @path POST /seats
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  input: ISeat.ICreate,
): Promise<create.Output> {
  return !!connection.simulate
    ? create.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...create.METADATA,
          path: create.path(),
        },
        input,
      );
}
export namespace create {
  export type Input = ISeat.ICreate;
  export type Output = ISeat;

  export const METADATA = {
    method: "POST",
    path: "/seats",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/seats";
  export const random = (g?: Partial<typia.IRandomGenerator>): ISeat =>
    typia.random<ISeat>(g);
  export const simulate = (
    connection: IConnection,
    input: ISeat.ICreate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
