/**
 * @packageDocumentation
 * @module api.functional.auth
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IToken } from "../../structures/users/IToken";
import type { IUser } from "../../structures/users/IUser";

/**
 * @controller AuthController.signup
 * @path POST /auth/signup
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function signup(
  connection: IConnection,
  input: IUser.ICreate,
): Promise<signup.Output> {
  return !!connection.simulate
    ? signup.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...signup.METADATA,
          path: signup.path(),
        },
        input,
      );
}
export namespace signup {
  export type Input = IUser.ICreate;
  export type Output = IToken;

  export const METADATA = {
    method: "POST",
    path: "/auth/signup",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/auth/signup";
  export const random = (g?: Partial<typia.IRandomGenerator>): IToken =>
    typia.random<IToken>(g);
  export const simulate = (
    connection: IConnection,
    input: IUser.ICreate,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}

/**
 * @controller AuthController.signin
 * @path POST /auth/signin
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function signin(
  connection: IConnection,
  input: IUser.IRequest.ISearch,
): Promise<signin.Output> {
  return !!connection.simulate
    ? signin.simulate(connection, input)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...signin.METADATA,
          path: signin.path(),
        },
        input,
      );
}
export namespace signin {
  export type Input = IUser.IRequest.ISearch;
  export type Output = IToken;

  export const METADATA = {
    method: "POST",
    path: "/auth/signin",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: null,
  } as const;

  export const path = () => "/auth/signin";
  export const random = (g?: Partial<typia.IRandomGenerator>): IToken =>
    typia.random<IToken>(g);
  export const simulate = (
    connection: IConnection,
    input: IUser.IRequest.ISearch,
  ): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(input));
    return random(
      "object" === typeof connection.simulate && null !== connection.simulate
        ? connection.simulate
        : undefined,
    );
  };
}
